sites:
  autosport-japan:
    prefix_home: ""
    news_home: "https://www.as-web.jp/f1/news"
    scrape_title: ".news-list .title"
    get_title: "lambda x: x.contents[0]"
    scrape_link: "ul.news-list li a[href]"
    get_link: "lambda x: x['href']"
  motorsport:
    prefix_home: "https://jp.motorsport.com"
    news_home: "https://jp.motorsport.com/f1/news/"
    scrape_title: ".ms-item.ms-item-hor-d.ms-item-hor-t.ms-item-hor-m .ms-item__thumb-title"
    get_title: "lambda x: x.contents[0].strip()"
    scrape_link: ".ms-item.ms-item-hor-d.ms-item-hor-t.ms-item-hor-m"
    get_link: "lambda x: x['href']"
  F1情報通:
    prefix_home: ""
    news_home: "http://f1jouhou2.blog.fc2.com"
    scrape_title: "body #all .separate .index_title .index_h2 a"
    get_title: "lambda x: x.contents[0]"
    scrape_link: "body #all .separate .index_title .index_h2 a"
    get_link: "lambda x: x.attrs['href']" 
  F1-Gate:
    prefix_home: ""
    news_home: "https://f1-gate.com"
    scrape_title: ".content h2 a"
    get_title: "lambda x: x.contents[0]"
    scrape_link: ".content h2 a"
    get_link: "lambda x: x.attrs['href']"
  BBC:
    prefix_home: "https://www.bbc.com"
    news_home: "https://www.bbc.com/sport/formula1"
    scrape_title: "div[data-testid='promo'][type='article'] a p"
    get_title: "lambda x: x.get_text(strip=True)"
    scrape_link: "div[data-testid='promo'][type='article'] a"
    get_link: "lambda x: x['href'] if x.has_attr('href') else ''"
  autosport: 
    prefix_home: "https://www.motorsport.com"
    news_home: "https://www.motorsport.com/f1/news/"
    scrape_title: "a.ms-item"
    get_title: 'lambda x: x.get("title", "").strip()'
    scrape_link: "a.ms-item"
    get_link: 'lambda x: x["href"] if x.has_attr("href") else ""'   
  skysports:
    prefix_home: "https://www.skysports.com"
    news_home: "https://www.skysports.com/f1/news"
    scrape_title: "a.sdc-site-tile__headline-link span.sdc-site-tile__headline-text"
    get_title: "lambda x: x.get_text(strip=True)"
    scrape_link: "a.sdc-site-tile__headline-link"
    get_link: 'lambda x: x["href"] if x.has_attr("href") else ""'
      